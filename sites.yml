---
# ------------------------------------------------------------------------------
# Builds my XEN Server Farm from scratch
#
# This script runs as root on victoria.yaocm.id.au using ssh configuration
#   entry called 'victoria_root'.
# ------------------------------------------------------------------------------

- hosts:                victoria_root

  tasks:
  
  # ------------------- Add Bridge
  #                     Rather than using nmcli, I have hard-coded the interface
  #                     configuration files.
  #                     Some bridges are built on sub-interfaces

  - name:               "Optionally remove bridges and associated sub-interfaces"
    file:
      path:             "/etc/sysconfig/network-scripts/{{ item }}"
      state:            absent
    when:               remove_bridge is defined
    with_items:
      -                 "ifcfg-xenbr0"
      -                 "ifcfg-eth1:1"
      
  - name:               "Allow jumbo packages on XEN networks"
    lineinfile:
      path:             "/etc/sysconfig/network-scripts/ifcfg-eth1"
      line:             'MTU="9000"'
      regexp:           "^MTU="
      state:            present
    notify:             "restart network"

  - name:               "Add bridges"
    script:
      chdir:            /etc/sysconfig/network-scripts
      cmd:              "scripts/{{ item.script }}"
      creates:          "/etc/sysconfig/network-scripts/{{ item.creates }}"
      executable:       /bin/bash
    with_items:
      -                 { script: "create_bridges.sh", creates: "ifcfg-xenbr0" }
      -                 { script: "create_subif_on_eth1.sh", creates: "ifcfg-eth1:1" }
    register:           add_bridges
    notify:             "restart network"

  - name:               "Display output from add bridges"
    debug:
      var:              add_bridges.stdout_lines
    when:               add_bridges.stdout_lines is defined

  - name:               "Create bridge on eth0"
    blockinfile:
      insertafter:      EOF
      path:             /etc/sysconfig/network-scripts/ifcfg-eth0
      block:            |
        # Bridge 
        BRIDGE="xenbr0" 
    notify:             "restart network"

  # ------------------- Create Repository

  - name:               "Create Repository"
    file:
      path:             "/OVS/{{ item }}"
      state:            directory
    with_items:
      -                 iso_pool
      -                 seed_pool
      -                 running_pool

  # ------------------- Copy ISO images off NAS

  - name:               "Copy ISO images off NAS"
    copy:
      dest:             "/OVS/iso_pool/{{ item | basename }}"
      mode:             0644
      src:              "/opt/share/Nundah/software/Linux/{{ item }}"
    with_items:
      - "Oracle Enterprise Linux/Oracle Enterprise Linux 6.5/V41362-01.iso"
      - "Oracle Enterprise Linux/Oracle Enterprise Linux 7.7/V983339-01.iso"
      - "Oracle Enterprise Linux/Oracle Enterprise Linux 8.1/V984216-01.iso"
      - "Ubuntu/ubuntu-18.04.4-live-server-amd64.iso"
      - "Ubuntu/ubuntu-20.04.2-live-server-amd64.iso"

  # ------------------- Mount ISO Images

  - name:               "Create ISO Image Mount Points"
    file:
      path:             "/OVS/iso_pool/mounted/{{ item }}"
      state:            directory
    with_items:
      - "OL6.5"
      - "OL7.7"
      - "OL8.1"
      - "Ubuntu18.04"
      - "Ubuntu20.04"

  - name:               "Mount ISO Images"
    mount:
      fstype:           "iso9660"
      opts:             "loop,ro,noauto"
      path:             "/OVS/iso_pool/mounted/{{ item.mp }}"
      src:              "/OVS/iso_pool/{{ item.iso }}"
      state:            mounted
    with_items:
      - { mp: "OL6.5", iso: "V41362-01.iso" }
      - { mp: "OL7.7", iso: "V983339-01.iso" }
      - { mp: "OL8.1", iso: "V984216-01.iso" }
      - { mp: "Ubuntu18.04", iso: "ubuntu-18.04.4-live-server-amd64.iso" }
      - { mp: "Ubuntu20.04", iso: "ubuntu-20.04.2-live-server-amd64.iso" }

  # ------------------- Handlers
  
  handlers:
  
  - name:               "restart network"
    service:
      name:             network
      state:            restarted
...
