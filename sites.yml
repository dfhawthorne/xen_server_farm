---
# ------------------------------------------------------------------------------
# Builds my XEN Server Farm from scratch
#
# This script runs as root on victoria.yaocm.id.au using ssh configuration
#   entry called 'victoria_root'.
# ------------------------------------------------------------------------------

- hosts:                victoria_root

# ------------------------------------------------------------------------------
# Global variables
# ------------------------------------------------------------------------------

  vars:
    iso_images:
    -   {
        src_dir:        "Oracle Enterprise Linux/Oracle Enterprise Linux 6.5",
        dvd:            "V41362-01.iso",
        mp:             "OL6.5",
        vm_name:        "gold_ol6_5"
        }
    -   {
        src_dir:        "Oracle Enterprise Linux/Oracle Enterprise Linux 7.7",
        dvd:            "V983339-01.iso",
        mp:             "OL7.7",
        vm_name:        "gold_ol7_7"
        }
    -   {
        src_dir:        "Oracle Enterprise Linux/Oracle Enterprise Linux 8.1",
        dvd:            "V984216-01.iso",
        mp:             "OL8.1",
        vm_name:        "gold_ol8_1"
        }
    -   {
        src_dir:        "Oracle Enterprise Linux/Oracle Enterprise Linux 9.1",
        dvd:            "OracleLinux-R9-U1-x86_64-dvd.iso",
        mp:             "OL9.1",
        vm_name:        "gold_ol9_1"
        }
    -   {
        src_dir:        "Ubuntu",
        dvd:            "ubuntu-18.04.4-live-server-amd64.iso",
        mp:             "Ubuntu18.04",
        vm_name:        "gold_ub18_04"
        }
    -   {
        src_dir:        "Ubuntu",
        dvd:            "ubuntu-20.04.2-live-server-amd64.iso",
        mp:             "Ubuntu20.04",
        vm_name:        "gold_ub20_04"
        }
    -   {
        src_dir:        "Ubuntu",
        dvd:            "ubuntu-22.04.2-live-server-amd64.iso",
        mp:             "Ubuntu22.04",
        vm_name:        "gold_ub22_04"
        }
    scripts:
    -   {
        script:         "create_bridges.sh",
        creates:        "ifcfg-xenbr0"
        }
    -   {
        script:         "create_subif_on_eth1.sh",
        creates:        "ifcfg-eth1:1"
        }
    target_vms:
    -   {
        vm_name:        "redfern1",
        gold_image:     "gold_ol8_1",
        ip_addr_1:      "192.168.1.140",
        mac_addr_1:     "00:16:3E:00:00:0E",
        bridge_1:       "xenbr0",
        ip_addr_2:      "192.168.2.140",
        mac_addr_2:     "00:16:3E:00:00:0F",
        bridge_2:       "xenbr1",
        memory_size:    "4096",
        cpu_pool:       "RAC1",
        num_cpus:       2,
        vnc_port:       3
        }
    -   {
        vm_name:        "redfern2",
        gold_image:     "gold_ol8_1",
        ip_addr_1:      "192.168.1.141",
        mac_addr_1:     "00:16:3E:00:00:12",
        bridge_1:       "xenbr0",
        ip_addr_2:      "192.168.2.141",
        mac_addr_2:     "00:16:3E:00:00:13",
        bridge_2:       "xenbr1",
        memory_size:    "4096",
        cpu_pool:       "RAC2",
        num_cpus:       2,
        vnc_port:       4
        }
    -   {
        vm_name:        "goldengate1",
        gold_image:     "gold_ol8_1",
        ip_addr_1:      "192.168.1.150",
        mac_addr_1:     "00:16:3E:00:00:1E",
        bridge_1:       "xenbr0",
        memory_size:    "3176",
        cpu_pool:       "RAC1",
        num_cpus:       2,
        vnc_port:       24
        }
    -   {
        vm_name:        "goldengate2",
        gold_image:     "gold_ol8_1",
        ip_addr_1:      "192.168.1.151",
        mac_addr_1:     "00:16:3E:00:00:1F",
        bridge_1:       "xenbr0",
        memory_size:    "3176",
        cpu_pool:       "RAC2",
        num_cpus:       2,
        vnc_port:       25
        }


  tasks:
  
  # ------------------- Add Bridge
  #                     Rather than using nmcli, I have hard-coded the interface
  #                     configuration files.
  #                     Some bridges are built on sub-interfaces

  - name:               "Optionally remove bridges and associated sub-interfaces"
    ansible.builtin.file:
      path:             "/etc/sysconfig/network-scripts/{{ item }}"
      state:            absent
    when:               remove_bridge is defined
    loop:
      -                 "ifcfg-xenbr0"
      -                 "ifcfg-eth1:1"
      
  - name:               "Allow jumbo packages on XEN networks"
    ansible.builtin.lineinfile:
      path:             "/etc/sysconfig/network-scripts/ifcfg-eth1"
      line:             "{{ item.line }}"
      regexp:           "{{ item.regexp }}"
      state:            present
    loop:
      - { regexp: "^MTU=", line: 'MTU="9000"' }
      - { regexp: "^ONBOOT=", line: 'ONBOOT="yes"' }
    notify:             "restart network"

  - name:               "Add bridges"
    ansible.builtin.script:
      chdir:            /etc/sysconfig/network-scripts
      cmd:              "scripts/{{ item.script }}"
      creates:          "/etc/sysconfig/network-scripts/{{ item.creates }}"
      executable:       /bin/bash
    loop:               "{{ scripts }}"
    register:           add_bridges
    notify:             "restart network"

  - name:               "Display output from add bridges"
    ansible.builtin.debug:
      var:              add_bridges.stdout_lines
    when:               add_bridges.stdout_lines is defined

  - name:               "Create bridge on eth0"
    ansible.builtin.blockinfile:
      insertafter:      EOF
      path:             /etc/sysconfig/network-scripts/ifcfg-eth0
      block:            |
        # Bridge 
        BRIDGE="xenbr0" 
    notify:             "restart network"

  # ------------------- Create Repository

  - name:               "Create Repository"
    ansible.builtin.file:
      path:             "/OVS/{{ item }}"
      state:            directory
    loop:
      -                 iso_pool
      -                 seed_pool
      -                 running_pool
      -                 scripts

  # ------------------- Copy ISO images off NAS
  # Ref: https://sites.google.com/view/yetanotherocm/home/procedures/miscellaneous/use-nfs-for-oracle-software
  
  - name:               "Install NFS Client"
    ansible.builtin.yum:
      name:             nfs-utils
      state:            present
  
  - name:               "Create NFS mount point"
    ansible.builtin.file:
      path:             "/opt/share/Nundah"
      state:            directory
  
  - name:               "Mount Software Directory as NFS"
    ansible.posix.mount:
      path:             "/opt/share/Nundah"
      src:              "narrabri.yaocm.id.au:/data/Software"
      fstype:           "nfs4"
      opts:             "ro,bg,hard,nointr,rsize=32768,wsize=32768,tcp,vers=4,timeo=600"
      state:            mounted

  - name:               "Copy ISO images off NAS"
    ansible.builtin.command:
      argv:
      - cp
      - "/opt/share/Nundah/software/Linux/{{ item.src_dir }}/{{ item.dvd }}"
      - "/OVS/iso_pool/{{ item.dvd }}"
      creates:          "/OVS/iso_pool/{{ item.dvd }}"
    loop:               "{{ iso_images }}"

  # ------------------- Mount ISO Images

  - name:               "Create ISO Image Mount Points"
    ansible.builtin.file:
      path:             "/OVS/iso_pool/mounted/{{ item.mp }}"
      state:            directory
    loop:               "{{ iso_images }}"

  - name:               "Create Script to Mount ISO Images"
    ansible.builtin.template:
      dest:             "/OVS/scripts/mount_dvd.sh"
      mode:             0700
      src:              "mount_dvd.sh.j2"

  - name:               "Mount ISO Images Using Script"
    ansible.builtin.command:
      cmd:              "/OVS/scripts/mount_dvd.sh"
    register:           mount_dvd
    changed_when:       '" mounted as " in mount_dvd.stdout'

  - name:               "Display Output from Mount DVD"
    ansible.builtin.debug:
      var:              mount_dvd.stdout_lines
    when:
    -                   mount_dvd.changed
    -                   mount_dvd.stdout_lines is defined

  # ------------------- Create Gold Images

  - name:               "Stop and disable XEND Service"
    ansible.builtin.service:
      name:             xend
      enabled:          false
      state:            stopped

  - name:               "Create Gold Image Directories"
    ansible.builtin.file:
      path:             "/OVS/seed_pool/{{ item.vm_name }}"
      state:            directory
    loop:               "{{ iso_images }}"

  - name:               "Creates root disk for Gold Images"
    ansible.builtin.command:
      cmd:              "fallocate --length 50g root.dsk"
      creates:          "/OVS/seed_pool/{{ item.vm_name }}/root.dsk"
      chdir:            "/OVS/seed_pool/{{ item.vm_name }}"
    loop:               "{{ iso_images }}"

  - name:               "Create Gold Image Configuration Files"
    ansible.builtin.template:
      dest:             "/OVS/seed_pool/{{ item.vm_name }}/hvm.cfg"
      src:              gold_image_hvm.cfg.j2
    loop:               "{{ iso_images }}"

  # ------------------- Create CPU Pools

  - name:               "Create Script to Create CPU Pools"
    ansible.builtin.template:
      dest:             "/OVS/scripts/create_cpu_pools.sh"
      mode:             0700
      src:              "create_cpu_pools.sh.j2"

  - name:               "Create CPU Pools Using Script"
    ansible.builtin.command:
      cmd:              "/OVS/scripts/create_cpu_pools.sh"
    register:           create_cpu_pools
    changed_when:       '"Using config file " in create_cpu_pools.stdout'

  - name:               "Display Output from Create CPU Pools"
    ansible.builtin.debug:
      var:              create_cpu_pools.stdout_lines
    when:
    -                   create_cpu_pools.changed
    -                   create_cpu_pools.stdout_lines is defined
  
  # ------------------- Check for Linux Installations
  
  - name:               "Copy MD5SUM Checksum Files"
    ansible.builtin.copy:
      dest:             /OVS/seed_pool/gold_images_md5sum.dat
      src:              files/gold_images_md5sum.dat
  
  - name:               "Check the Gold Images"
    ansible.builtin.shell:
      cmd:              "md5sum --check /OVS/seed_pool/gold_images_md5sum.dat"
  
  # ------------------- Create Target VM
  
  - name:               "Create Target VM Directory"
    ansible.builtin.file:
      path:             "/OVS/running_pool/{{ item.vm_name }}"
      state:            directory
    loop:               "{{ target_vms }}"
  
  - name:               "Create Target VM Configuration File"
    ansible.builtin.template:
      dest:             "/OVS/running_pool/{{ item.vm_name }}/hvm.cfg"
      src:              target_vm_hvm.cfg.j2
    loop:               "{{ target_vms }}"
  
  - name:               "Copy Gold Images to Target VMs"
    ansible.builtin.command:
      argv:
      - cp
      - "/OVS/seed_pool/{{ item.gold_image }}/root.dsk"
      - "/OVS/running_pool/{{ item.vm_name }}/root.dsk"
      creates:          "/OVS/running_pool/{{ item.vm_name }}/root.dsk"
    loop:               "{{ target_vms }}"
  
  # ------------------- Configure Target VM
  
  - name:               "Create Script to Configure Target VMs"
    ansible.builtin.template:
      dest:             "/OVS/running_pool/{{ item.vm_name }}/config_target_vm.sh"
      src:              config_target_vm.sh.j2
    loop:               "{{ target_vms }}"
    
  - name:               "Configure Target VMs"
    ansible.builtin.shell:
      cmd:              "sh /OVS/running_pool/{{ item.vm_name }}/config_target_vm.sh"
    loop:               "{{ target_vms }}"
    register:           config_tgt_vm
#    changed_when:       config_tgt_vm.results.stdout contains "Configured."
    
  - debug:
      var:              config_tgt_vm

  # ------------------- Handlers
  
  handlers:
  
  - name:               "restart network"
    ansible.builtin.service:
      name:             network
      state:            restarted
...
