---
# ------------------------------------------------------------------------------
# Builds my XEN Server Farm from scratch
#
# This script runs as root on victoria.yaocm.id.au using ssh configuration
#   entry called 'victoria_root'.
# ------------------------------------------------------------------------------

- hosts:                victoria_root

# ------------------------------------------------------------------------------
# Global variables
# ------------------------------------------------------------------------------

  vars:
    iso_images:
    - {src_dir: "Oracle Enterprise Linux/Oracle Enterprise Linux 6.5",
       dvd:     "V41362-01.iso",
       sum:     "a65041fbe0ba67e3ff6f5f93804a8f47d5b5f132",
       mp:      "OL6.5"}
    - {src_dir: "Oracle Enterprise Linux/Oracle Enterprise Linux 7.7",
       dvd:     "V983339-01.iso",
       sum:     "3ef94628cf1025dab5f10bbc1ed2005ca0cb0933",
       mp:      "OL7.7"}
    - {src_dir: "Oracle Enterprise Linux/Oracle Enterprise Linux 8.1",
       dvd:     "V984216-01.iso",
       sum:     "26262db78fa7550a0ccd64c4ead7c7c57c901de6",
       mp:      "OL8.1"}
    - {src_dir: "Ubuntu",
       dvd:     "ubuntu-18.04.4-live-server-amd64.iso",
       sum:     "6a341a29cd0626c1a4a6e1019d48b1fbf91ced1d",
       mp:      "Ubuntu18.04"}
    - {src_dir: "Ubuntu",
       dvd:     "ubuntu-20.04.2-live-server-amd64.iso",
       sum:     "9af24f2d3a01dd8531d65d357059a6dc216f1625",
       mp:      "Ubuntu20.04"}
    scripts:
    - {script: "create_bridges.sh",
       creates: "ifcfg-xenbr0"}
    - {script: "create_subif_on_eth1.sh",
       creates: "ifcfg-eth1:1"}


  tasks:
  
  # ------------------- Add Bridge
  #                     Rather than using nmcli, I have hard-coded the interface
  #                     configuration files.
  #                     Some bridges are built on sub-interfaces

  - name:               "Optionally remove bridges and associated sub-interfaces"
    file:
      path:             "/etc/sysconfig/network-scripts/{{ item }}"
      state:            absent
    when:               remove_bridge is defined
    loop:
      -                 "ifcfg-xenbr0"
      -                 "ifcfg-eth1:1"
      
  - name:               "Allow jumbo packages on XEN networks"
    lineinfile:
      path:             "/etc/sysconfig/network-scripts/ifcfg-eth1"
      line:             "{{ item.line }}"
      regexp:           "{{ item.regexp }}"
      state:            present
    loop:
      - { regexp: "^MTU=",    line: 'MTU="9000"'  }
      - { regexp: "^ONBOOT=", line: 'ONBOOT="yes"' }
    notify:             "restart network"

  - name:               "Add bridges"
    script:
      chdir:            /etc/sysconfig/network-scripts
      cmd:              "scripts/{{ item.script }}"
      creates:          "/etc/sysconfig/network-scripts/{{ item.creates }}"
      executable:       /bin/bash
    loop:               "{{ scripts }}"
    register:           add_bridges
    notify:             "restart network"

  - name:               "Display output from add bridges"
    debug:
      var:              add_bridges.stdout_lines
    when:               add_bridges.stdout_lines is defined

  - name:               "Create bridge on eth0"
    blockinfile:
      insertafter:      EOF
      path:             /etc/sysconfig/network-scripts/ifcfg-eth0
      block:            |
        # Bridge 
        BRIDGE="xenbr0" 
    notify:             "restart network"

  # ------------------- Create Repository

  - name:               "Create Repository"
    file:
      path:             "/OVS/{{ item }}"
      state:            directory
    loop:
      -                 iso_pool
      -                 seed_pool
      -                 running_pool

  # ------------------- Copy ISO images off NAS

  - name:               "Copy ISO images off NAS"
    copy:
      checksum:         "{{ item.sum }}"
      dest:             "/OVS/iso_pool/{{ item.dvd }}"
      mode:             0644
      src:              "/opt/share/Nundah/software/Linux/{{ item.src_dir }}/{{ item.dvd }}"
    loop:               "{{ iso_images }}"

  # ------------------- Mount ISO Images

  - name:               "Create ISO Image Mount Points"
    file:
      path:             "/OVS/iso_pool/mounted/{{ item.mp }}"
      state:            directory
    loop:               "{{ iso_images }}"

  - name:               "Mount ISO Images"
    mount:
      fstype:           "iso9660"
      opts:             "loop,ro,noauto"
      path:             "/OVS/iso_pool/mounted/{{ item.mp }}"
      src:              "/OVS/iso_pool/{{ item.dvd }}"
      state:            mounted
    loop:               "{{ iso_images }}"

  # ------------------- Handlers
  
  handlers:
  
  - name:               "restart network"
    service:
      name:             network
      state:            restarted
...
